server <- function(input, output) {
reaction1 <- reactive({
req(input$meta, input$gender) # the trick
options(scipen = 80)
demo_df %>%
filter(Metabolite == input$meta,
Gender %in% input$gender) %>%
fun1()
})
output$text1 <- renderText({
input$meta
})
output$plot_bar1 <- renderPlot({
ggboxplot(reaction1()[[1]],
x = "Organ",
y = "Intensity",
bxp.errorbar = T,
fill = "Age",
palette = "npg",
border.size = 1,
add.params = list(
size = 2,
width = 0.3
)
) +
geom_text(
data = reaction1()[[2]],
aes(x = Organ, y = y_pos*1.05, label = p_label),
position = position_dodge(0.8),
size = 5
) +
scale_y_continuous(
breaks = function(x) pretty(x, n = 6),
labels = scales::label_scientific()
) +
theme(
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(angle = 45, size = 12, hjust = 1),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
labs(x = "Organ",
y = "Intensity") +
geom_segment(
data = reaction1()[[2]],
aes(x = 1, xend = 2,
y = reaction1()[[2]]$y_pos[1] *1.3,
yend = reaction1()[[2]]$y_pos[1]*1.3),
size = 0.2
) +
geom_segment(
data = reaction1()[[2]],
aes(x = 3, xend = 5,
y = reaction1()[[2]]$y_pos[1] *1.3,
yend = reaction1()[[2]]$y_pos[1]*1.3),
size = 0.2
) +
geom_segment(
data = reaction1()[[2]],
aes(x = 6, xend = 13,
y = reaction1()[[2]]$y_pos[1] *1.3,
yend = reaction1()[[2]]$y_pos[1]*1.3),
size = 0.2
) +
geom_text(
data = reaction1()[[3]],
aes(x = x, y = y*1.4, label = label),
size = 5
) +
annotation_custom(
grob = reaction1()[[4]][[1]],
xmin = 0.8,
xmax = 1.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
) +
annotation_custom(
grob = reaction1()[[4]][[2]],
xmin = 1.8,
xmax = 2.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
) +
annotation_custom(
grob = reaction1()[[4]][[3]],
xmin = 2.8,
xmax = 3.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[4]],
xmin = 3.8,
xmax = 4.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[5]],
xmin = 4.8,
xmax = 5.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[6]],
xmin = 5.8,
xmax = 6.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[7]],
xmin = 6.8,
xmax = 7.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[8]],
xmin = 7.8,
xmax = 8.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[9]],
xmin = 8.8,
xmax = 9.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[10]],
xmin = 9.8,
xmax = 10.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[11]],
xmin = 10.8,
xmax = 11.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[12]],
xmin = 11.8,
xmax = 12.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[4]][[13]],
xmin = 12.8,
xmax = 13.2,
ymin = reaction1()[[2]]$y_pos[1] *1,
ymax = reaction1()[[2]]$y_pos[1] *1.3
)
})
output$plot_bar2 <- renderPlot({
ggboxplot(reaction1()[[5]],
x = "Organ",
y = "Intensity",
bxp.errorbar = T,
fill = "Age",
palette = "npg",
border.size = 1,
add.params = list(
size = 2,
width = 0.3
)
) +
geom_text(
data = reaction1()[[6]],
aes(x = Organ, y = y_pos*1.05, label = p_label),
position = position_dodge(0.8),
size = 5
) +
scale_y_continuous(
breaks = function(x) pretty(x, n = 6),
labels = scales::label_scientific()
) +
theme(
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(angle = 45, size = 12, hjust = 1),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.margin = margin(5.5, 5.5, 5.5, 5.5, "pt")
) +
labs(x = "Organ",
y = "Intensity") +
geom_segment(
data = reaction1()[[6]],
aes(x = 1, xend = 2,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
) +
geom_segment(
data = reaction1()[[6]],
aes(x = 3, xend = 4,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
) +
geom_segment(
data = reaction1()[[6]],
aes(x = 5, xend = 6,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
) +
geom_segment(
data = reaction1()[[6]],
aes(x = 6.8, xend = 7.2,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
)  +
geom_segment(
data = reaction1()[[6]],
aes(x = 7.8, xend = 8.2,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
)  +
geom_segment(
data = reaction1()[[6]],
aes(x = 8.8, xend = 9.2,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
)  +
geom_segment(
data = reaction1()[[6]],
aes(x = 9.8, xend =10.2,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
)  +
geom_segment(
data = reaction1()[[6]],
aes(x = 10.8, xend = 13.2,
y = reaction1()[[6]]$y_pos[1] *1.3,
yend = reaction1()[[6]]$y_pos[1]*1.3),
size = 0.2
) +
geom_text(
data = reaction1()[[7]],
aes(x = x, y = y*1.4, label = label),
size = 5
) +
annotation_custom(
grob = reaction1()[[8]][[1]],
xmin = 0.8,
xmax = 1.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
) +
annotation_custom(
grob = reaction1()[[8]][[2]],
xmin = 1.8,
xmax = 2.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
) +
annotation_custom(
grob = reaction1()[[8]][[3]],
xmin = 2.8,
xmax = 3.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[4]],
xmin = 3.8,
xmax = 4.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[5]],
xmin = 4.8,
xmax = 5.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[6]],
xmin = 5.8,
xmax = 6.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[7]],
xmin = 6.8,
xmax = 7.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[8]],
xmin = 7.8,
xmax = 8.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[9]],
xmin = 8.8,
xmax = 9.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[10]],
xmin = 9.8,
xmax = 10.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[11]],
xmin = 10.8,
xmax = 11.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[12]],
xmin = 11.8,
xmax = 12.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)+
annotation_custom(
grob = reaction1()[[8]][[13]],
xmin = 12.8,
xmax = 13.2,
ymin = reaction1()[[6]]$y_pos[1] *1,
ymax = reaction1()[[6]]$y_pos[1] *1.3
)
})
}
shinyApp(ui = ui, server = server)
runApp()
# 替换原有的fread代码，添加encoding参数
dt <- fread("shinydata1.csv",
showProgress = FALSE,
data.table = TRUE,
encoding = "Latin-1") # 或 "GBK"，根据实际编码调整
# 读取后强制清洗字符列编码（关键！将无效字符替换为空）
clean_utf8 <- function(x) {
if (is.character(x)) {
iconv(x, from = "UTF-8", to = "UTF-8", sub = "") # 移除无效UTF-8字符
} else {
x
}
}
dt <- dt %>% mutate(across(c(Organ, Age, Gender), clean_utf8)) # 清洗字符列
# 后续的pivot_longer和Metabolite排序也需清洗
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) %>%
mutate(Metabolite = clean_utf8(Metabolite)) -> demo_df
# 后续的pivot_longer和Metabolite排序也需清洗
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
)  -> demo_df
dt <- dt %>%
mutate(across(-c(Organ, Age, Gender), ~ as.numeric(as.character(.x))))
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
runApp()
file_pre <- "./" # same directory as shiny file
# 替换原有的fread代码，添加encoding参数
dt <- fread("shinydata1.csv",
showProgress = FALSE,
data.table = TRUE,
encoding = "Latin-1") # 或 "GBK"，根据实际编码调整
# 读取后强制清洗字符列编码（关键！将无效字符替换为空）
clean_utf8 <- function(x) {
if (is.character(x)) {
iconv(x, from = "UTF-8", to = "UTF-8", sub = "") # 移除无效UTF-8字符
} else {
x
}
}
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
# 替换原有的fread代码，添加encoding参数
dt <- fread("shinydata1.csv",
showProgress = FALSE,
data.table = TRUE,
encoding = "Latin-1") # 或 "GBK"，根据实际编码调整
# 读取后强制清洗字符列编码（关键！将无效字符替换为空）
clean_utf8 <- function(x) {
if (is.character(x)) {
iconv(x, from = "UTF-8", to = "UTF-8", sub = "") # 移除无效UTF-8字符
} else {
x
}
}
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
# 替换原有的fread代码，添加encoding参数
dt <- fread("shinydata1.csv",
showProgress = FALSE,
data.table = TRUE,
encoding = "Latin-1") # 或 "GBK"，根据实际编码调整
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
# 替换原有的fread代码，添加encoding参数
dt <- fread("shinydata1.csv",
showProgress = FALSE,
data.table = TRUE) # 或 "GBK"，根据实际编码调整
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
# 替换原有的fread代码，添加encoding参数
dt <- fread("shinydata1.xlsm",
showProgress = FALSE,
data.table = TRUE) # 或 "GBK"，根据实际编码调整
install.packages("readxl")
library(readxl)
dt <- read_excel("shinydata1.xlsx",
sheet = 1,          # 工作表索引（或名称）
col_names = TRUE,   # 是否有表头
skip = 0,           # 跳过前n行
n_max = Inf)        # 最大读取行数
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
dt <- read_excel("shinydata1.xlsx",
sheet = 1,          # 工作表索引（或名称）
col_names = TRUE,   # 是否有表头
skip = 0,           # 跳过前n行
n_max = Inf)        # 最大读取行数
# 再进行pivot_longer
dt %>%
pivot_longer(
cols = -c(Organ, Age, Gender),
names_to = "Metabolite",
values_to = "Intensity"
) -> demo_df
runApp()
install.packages("readxl")
runApp()
sort(unique(demo_df$Metabolite))
Meta_v <- sort(unique(demo_df$Metabolite))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/minlu/OneDrive - University of California, Davis/Desktop/Aging Brain/Manuscript 2/For prof.Ji/ShinyApp_178/.RData")
shiny::runApp('C:/Users/minlu/AppData/Local/Temp/1a462b97-5c48-4f2e-ad7a-ae6f7e9e3f60_ShinyApp_178.zip.ShinyApp_178.zip')
shiny::runApp()
shiny::runApp()
